<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org/DTD Config 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="adminMapper">
	<!-- 미 답변 청원 / 민원 / 제안 / 문의 카운트 -->
	<select id="getPetitionCount" parameterType="hashmap" resultType="int">
		SELECT nvl(count(*),0) FROM petition
		WHERE petition_status = 1
	</select>
	<select id="getComplaintCount" parameterType="hashmap" resultType="int">
		SELECT nvl(count(*),0) FROM complaint
		WHERE complaint_status = 0
	</select>
	<select id="getSuggestionCount" parameterType="hashmap" resultType="int">
		SELECT nvl(count(*),0) FROM suggestion
		WHERE suggestion_status = 0
	</select>
	<select id="getInquiryCount" parameterType="hashmap" resultType="int">
		SELECT nvl(count(*),0) FROM inquiry
		WHERE inquiry_status = 0
	</select>
	
	
	<select id="getMemberInfo" resultType="Member">
		SELECT id, name, email, tel, author, birthday, reg_date AS regDate, wdr_date AS wdrDate FROM (
			SELECT ROWNUM RN, A.* 
				FROM (
						SELECT * 
						FROM member
						) A
				)
		WHERE RN BETWEEN #{start} AND #{end}
	</select>
	
	<!--카운트, 회원검색 -->
	<select id="getMemberCount" parameterType="hashmap"
		resultType="int">
		SELECT nvl(count(*),0) FROM member
		WHERE id like '%${id}%'
	</select>
	
	<!-- 회원 검색 -->
	<select id="getSearchMemberInfo" resultType="Member">
		SELECT id, name, email, tel, birthday, author, reg_date AS regDate, wdr_date AS wdrDate FROM (
			SELECT ROWNUM RN, A.* 
				FROM (
						SELECT * 
						FROM member
						WHERE id like '%${id}%'
						) A
				)
		WHERE RN BETWEEN #{start} AND #{end}
		AND id like '%${id}%'
	</select> 
	
	<!--청원 카운트, 검색 -->
	<select id="getSearchPetitionCount" parameterType="hashmap"
		resultType="int">
		SELECT nvl(count(*),0) FROM petition
		WHERE petition_title like '%${petitionTitle}%'
		AND petition_area like '%${petitionArea}%'
		AND petition_field like '%${petitionField}%'
	</select>
	
	<!-- 청원 목록 -->
	<select id="getPetitionInfo" resultType="Petition">
		SELECT petition_no AS
			petitionNo,id, petition_title AS petitionTitle,
			petition_content AS petitionContent, petition_area AS petitionArea,
			petition_field AS petitionField, petition_sdate AS petitionSdate, petition_edate AS petitionEdate,
			petition_agreement AS petitionAgreement, petition_status AS petitionStatus
		FROM (
		SELECT ROWNUM RN, A.*
		FROM (
		SELECT *
		FROM petition
		ORDER BY petition_no DESC) A
		)
		WHERE RN BETWEEN #{start} AND #{end}
	</select> 
	
	<!-- 청원 검색 -->
	<select id="getSearchPetitionInfo" resultType="Petition">
		SELECT petition_no AS
			petitionNo,id, petition_title AS petitionTitle,
			petition_content AS petitionContent, petition_area AS petitionArea,
			petition_field AS petitionField, petition_sdate AS petitionSdate, petition_edate AS petitionEdate,
			petition_agreement AS petitionAgreement, petition_status AS petitionStatus
		FROM (
		SELECT ROWNUM RN, A.*
		FROM (
		SELECT *
		FROM petition
		WHERE petition_title like '%${petitionTitle}%'
		AND petition_area like '%${petitionArea}%'
		AND petition_field like '%${petitionField}%'
		ORDER BY petition_no DESC) A
		)
		WHERE RN BETWEEN #{start} AND #{end} 
		AND petition_title like '%${petitionTitle}%'
		AND petition_area like '%${petitionArea}%'
		AND petition_field like '%${petitionField}%'
	</select> 
	
	<!-- 각각의 청원 보기 -->
	<select id="getPetition" parameterType="hashmap" resultType="Petition">
		SELECT petition_no AS petitionNo, id, petition_title AS petitionTitle, 
			petition_content AS petitionContent, petition_area AS petitionArea, 
			petition_field AS petitionField, petition_sdate AS petitionSdate, petition_edate AS petitionEdate,
			petition_agreement AS petitionAgreement, petition_status AS petitionStatus
		FROM petition 
		WHERE petition_no = #{petitionNo}
	</select>
	<!-- 각각의 청원 보기(댓글-동의) -->
	<select id="getCommentP" resultType="CommentP">
		SELECT commentP_no AS commentPNo, petition_no AS petitionNo, id,
			commentP_content AS commentPContent, commentP_date AS commentPDate
		FROM commentP
		WHERE petition_no = #{petitionNo}
	</select>
	<!-- 각각의 청원 보기(답변) -->
	<select id="getAnswerP" resultType="AnswerP">
		SELECT answerP_no AS answerPNo, petition_no AS petitionNo, answerP_content AS answerPContent,
		answerP_date AS answerPDate
		FROM answerP
		WHERE petition_no = #{petitionNo}
	</select>
	
	<!-- 청원 마감 -->
	<update id="updatePetitionStatus1" parameterType="int">
		UPDATE petition SET
		petition_status = 1
		WHERE petition_no = #{petitionNo}
	</update>
	
	<!-- 청원 답변 작성 -->
	<insert id="answerPWrite" parameterType="AnswerP">
		INSERT INTO answerP
		VALUES (answerPseq.nextval, #{petitionNo}, #{answerPContent} ,sysdate)
	</insert>
	<update id="updatePetitionStatus2" parameterType="int">
		UPDATE petition SET
		petition_status = 2
		WHERE petition_no = #{petitionNo}
	</update>
	
	<!-- 청원 삭제 (3 = 거부된 청원) -->
	<update id="updatePetitionStatus3" parameterType="int">
		UPDATE petition SET
		petition_status = 3
		WHERE petition_no = #{petitionNo}
	</update>
	
	<!--상태별 카운트 -->
	<select id="getPetitionStatusCount" parameterType="hashmap"
		resultType="int">
		SELECT nvl(count(*),0) FROM petition
		WHERE petition_status = #{petitionStatus}
	</select>
	
	<!-- 상태별 청원 목록 -->
	<select id="getPetitionStatus" resultType="Petition">
		SELECT petition_no AS
			petitionNo,id, petition_title AS petitionTitle,
			petition_content AS petitionContent, petition_area AS petitionArea,
			petition_field AS petitionField, petition_sdate AS petitionSdate, petition_edate AS petitionEdate,
			petition_agreement AS petitionAgreement, petition_status AS petitionStatus
		FROM (
		SELECT ROWNUM RN, A.*
		FROM (
		SELECT *
		FROM petition
		WHERE petition_status = #{petitionStatus}
		ORDER BY petition_no DESC) A
		)
		WHERE RN BETWEEN #{start} AND #{end}
		AND petition_status = #{petitionStatus}
	</select> 
	
	<!--민원 카운트, 검색 -->
	<select id="getSearchComplaintCount" parameterType="hashmap"
		resultType="int">
		SELECT nvl(count(*),0) FROM complaint
		WHERE complaint_title like '%${complaintTitle}%'
		AND complaint_organization like '%${complaintOrganization}%'
		AND complaint_organization_detail like '%${complaintOrganizationDetail}%'
		<if test="complaintSdate != null and complaintSdate != '' and complaintEdate != null and complaintEdate != ''" >
		<![CDATA[
		AND complaint_date >= #{complaintSdate} AND complaint_date-1 <= #{complaintEdate}
		]]>
		</if>
	</select>
	
	<!-- 민원 목록 -->
	<select id="getComplaintInfo" resultType="Complaint">
		SELECT complaint_no AS
			complaintNo,id, complaint_title AS complaintTitle,
			complaint_content AS complaintContent, complaint_organization AS complaintOrganization,
			complaint_organization_detail AS complaintOrganizationDetail, complaint_date AS complaintDate,
			complaint_count AS complaintCount, complaint_status AS complaintStatus
		FROM (
		SELECT ROWNUM RN, A.*
		FROM (
		SELECT *
		FROM complaint
		ORDER BY complaint_no DESC) A
		)
		WHERE RN BETWEEN #{start} AND #{end}
	</select> 
	
	<!-- 각각의 민원 보기 -->
	<select id="getComplaint" parameterType="hashmap" resultType="Complaint">
		SELECT complaint_no AS
			complaintNo,id, complaint_title AS complaintTitle,
			complaint_content AS complaintContent, complaint_organization AS complaintOrganization,
			complaint_organization_detail AS complaintOrganizationDetail, complaint_date AS complaintDate,
			complaint_count AS complaintCount, complaint_status AS complaintStatus
		FROM complaint
		WHERE complaint_no = #{complaintNo}
	</select>
	
	<!-- 각각의 민원 보기(답변) -->
	<select id="getAnswerC" resultType="AnswerC">
		SELECT answerC_no AS answerCNo, complaint_no AS complaintNo, answerC_content AS answerCContent,
		answerC_date AS answerCDate
		FROM answerC
		WHERE complaint_no = #{complaintNo}
	</select>
	
	<!-- 조회수 -->
<!--    <update id="addReadCount" parameterType="hashmap">
     update complaint set complaint_count = complaint_count +1 
         where complaint_no = #{complaintNo} 
   </update> -->
   
   	<!-- 민원 답변 작성 -->
	<insert id="answerCWrite" parameterType="AnswerC">
		INSERT INTO answerC
		VALUES (answerCseq.nextval, #{complaintNo}, #{answerCContent} ,sysdate)
	</insert>
	<update id="updateComplaintStatus1" parameterType="int">
		UPDATE complaint SET
		complaint_status = 1
		WHERE complaint_no = #{complaintNo}
	</update>
	
	<!-- 민원 삭제 (2 = 거부된 민원) -->
	<update id="updateComplaintStatus2" parameterType="int">
		UPDATE complaint SET
		complaint_status = 2
		WHERE complaint_no = #{complaintNo}
	</update>
	
	<!-- 민원 검색 -->
	<select id="getSearchComplaintInfo" resultType="Complaint">
		SELECT complaint_no AS
			complaintNo,id, complaint_title AS complaintTitle,
			complaint_content AS complaintContent, complaint_organization AS complaintOrganization,
			complaint_organization_detail AS complaintOrganizationDetail, complaint_date AS complaintDate,
			complaint_count AS complaintCount, complaint_status AS complaintStatus
		FROM (
		SELECT ROWNUM RN, A.*
		FROM (
		SELECT *
		FROM complaint
		WHERE complaint_title like '%${complaintTitle}%'
		AND complaint_organization like '%${complaintOrganization}%'
		AND complaint_organization_detail like '%${complaintOrganizationDetail}%'
		<if test="complaintSdate != null and complaintSdate != '' and complaintEdate != null and complaintEdate != ''" >
		<![CDATA[
		AND complaint_date >= #{complaintSdate} AND complaint_date-1 <= #{complaintEdate}
		]]>
		</if>
		ORDER BY complaint_no DESC) A
		)
		WHERE RN BETWEEN #{start} AND #{end}
		AND complaint_title like '%${complaintTitle}%'
		AND complaint_organization like '%${complaintOrganization}%'
		AND complaint_organization_detail like '%${complaintOrganizationDetail}%'
		<if test="complaintSdate != null and complaintSdate != '' and complaintEdate != null and complaintEdate != ''" >
		<![CDATA[
		AND complaint_date >= #{complaintSdate} AND complaint_date-1 <= #{complaintEdate}
		]]>
		</if>
	</select> 
	
		<!--상태별 카운트 -->
	<select id="getComplaintStatusCount" parameterType="hashmap"
		resultType="int">
		SELECT nvl(count(*),0) FROM complaint
		WHERE complaint_status = #{complaintStatus}
	</select>
	
	<!-- 상태별 청원 목록 -->
	<select id="getComplaintStatus" resultType="Complaint">
		SELECT complaint_no AS
			complaintNo,id, complaint_title AS complaintTitle,
			complaint_content AS complaintContent, complaint_organization AS complaintOrganization,
			complaint_organization_detail AS complaintOrganizationDetail, complaint_date AS complaintDate,
			complaint_count AS complaintCount, complaint_status AS complaintStatus
		FROM (
		SELECT ROWNUM RN, A.*
		FROM (
		SELECT *
		FROM complaint
		WHERE complaint_status = #{complaintStatus}
		ORDER BY complaint_no DESC) A
		)
		WHERE RN BETWEEN #{start} AND #{end}
		AND complaint_status = #{complaintStatus}
	</select> 
</mapper>